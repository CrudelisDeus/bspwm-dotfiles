#!/bin/sh
# =============================================================
# Author:  gh0stzk
# Repo:    https://github.com/gh0stzk/dotfiles
# Date:    29.01.2025
#
# ScreenShoTer - A versatile screenshot script
# Features:
#   - Supports single and multi-monitor setups
#   - By default captures only the monitor where cursor is located
#   - Special option to capture all monitors at once
#   - Multiple capture modes:
#     	* Full screenshot of current monitor
#     	* Custom area selection
#     	* Active window capture
#     	* Timed captures (3 seconds)
#   - System notifications when taking screenshots
#   - Automatic clipboard copy
#   - Saves screenshots with timestamp
#
# Dependencies: maim, xrandr, xdotool, rofi, xclip, dunst
#
# Copyright (C) 2021-2025 gh0stzk <z0mbi3.zk@protonmail.com>
# Licensed under GPL-3.0 license
# =============================================================

# Screenshot general options
timestamp=$(date +%Y-%m-%d-%H%M%S)
dir="$(xdg-user-dir PICTURES)/ScreenShots"
filename="$dir/Shot-${timestamp}.png"

# Create dir if not exists
[ -d "$dir" ] || mkdir -p "$dir"

# Rofi options
s_full=""
s_select=""
s_in3="󰔝"
s_in3select="󰆞 󰔝"
s_all="󰍹"
s_window=""
s_edit="󰄄"  # scissors icon

# Function to get current monitor geometry based on mouse position
get_current_monitor() {
    MONITORS=$(xrandr | grep -o '[0-9]*x[0-9]*[+-][0-9]*[+-][0-9]*')
    XMOUSE=$(xdotool getmouselocation | awk -F "[: ]" '{print $2}')
    YMOUSE=$(xdotool getmouselocation | awk -F "[: ]" '{print $4}')

    for mon in ${MONITORS}; do
        MONW=$(echo ${mon} | awk -F "[x+]" '{print $1}')
        MONH=$(echo ${mon} | awk -F "[x+]" '{print $2}')
        MONX=$(echo ${mon} | awk -F "[x+]" '{print $3}')
        MONY=$(echo ${mon} | awk -F "[x+]" '{print $4}')

        if [ "$XMOUSE" -ge "$MONX" ] && \
           [ "$XMOUSE" -le $((MONX + MONW)) ] && \
           [ "$YMOUSE" -ge "$MONY" ] && \
           [ "$YMOUSE" -le $((MONY + MONH)) ]; then
                echo "${MONW}x${MONH}+${MONX}+${MONY}"
                return 0
        fi
    done

    return 1
}

rofi_cmd() {
    rofi -dmenu \
        -p Screenshot \
        -mesg "Directory :: $dir" \
        -markup-rows \
        -theme "$HOME"/.config/bspwm/config/rofi-themes/Screenshot.rasi
}

run_rofi() {
    printf "%s\n%s\n%s\n%s\n%s\n%s\n%s\n" "$s_full" "$s_select" "$s_window" "$s_edit" "$s_in3" "$s_in3select" "$s_all" | rofi_cmd
}

show_notification() {
    if [ -e "$filename" ]; then
        dunstify -r 699 -i "$filename" "Screenshot" "Screenshot saved and copied to clipboard"
    else
        dunstify -r 699 -i user-trash "Screenshot" "Screenshot Canceled"
    fi
}

copy_screenshot() {
    xclip -selection clipboard -t image/png -i "$filename"
}

take_screenshot() {
    mode="$1"
    all_monitors="$2"
    geometry=""
    cmd="maim -u -d 1"

    case "$mode" in
        "full")
            if [ "$all_monitors" != "true" ]; then
                geometry=$(get_current_monitor)
                [ -n "$geometry" ] && cmd="$cmd -g $geometry"
            fi
            ;;
        "select")
            cmd="$cmd -s -o -c 0.467,0.239,0.863,0.15 -l"
            ;;
        "window")
            win_id=$(xdotool getactivewindow 2>/dev/null)
            [ -n "$win_id" ] && cmd="$cmd -i $win_id"
            ;;
        "edit")
            # Take full screenshot (current monitor) first, with zero delay for speed
            if [ "$all_monitors" != "true" ]; then
                geometry=$(get_current_monitor)
                [ -n "$geometry" ] && cmd="maim -u -d 0 -g $geometry"
            else
                cmd="maim -u -d 0"
            fi
            ;;
    esac

    $cmd "$filename"

    if [ "$?" -eq 0 ]; then
        paplay /usr/share/sounds/freedesktop/stereo/screen-capture.oga > /dev/null 2>&1
        if [ "$mode" = "edit" ]; then
            # Pass monitor geometry (if any) so editor can offset crop correctly
            if [ -n "$geometry" ]; then
                python "$HOME/.config/bspwm/bin/screenshot_editor.py" "$filename" "$geometry"
            else
                python "$HOME/.config/bspwm/bin/screenshot_editor.py" "$filename"
            fi
            copy_screenshot
            show_notification
        else
            copy_screenshot
            show_notification
        fi
    fi
}

countdown() {
    for sec in $(seq "$1" -1 1); do
        dunstify -r 345 -t 1100 -i ~/.config/bspwm/config/assets/screenshot.png "Taking shot in : $sec"
        sleep 1
    done
}

run_cmd() {
    case $1 in
        --now)
            take_screenshot "full" false ;;
        --sel)
            take_screenshot "select" false ;;
        --win)
            take_screenshot "window" false ;;
        --edit)
            take_screenshot "edit" false ;;
        --in3)
            countdown 3 && take_screenshot "full" false ;;
        # INFO: new option for screenshot in selected area in 3 seconds
        --in3select)
            countdown 3 && take_screenshot "select" false ;;

        --all)
            take_screenshot "full" true ;;
    esac
}

# If called with a flag, bypass rofi menu
case "$1" in
    --now|--sel|--win|--edit|--in3|--in3select|--all)
        run_cmd "$1"
        exit 0 ;;
esac

select_option="$(run_rofi)"
case ${select_option} in
    "$s_full")
        run_cmd --now ;;
    "$s_select")
        run_cmd --sel ;;
    "$s_window")
        run_cmd --win ;;
    "$s_edit")
        run_cmd --edit ;;
    "$s_in3")
        run_cmd --in3 ;;
    "$s_in3select")
        run_cmd --in3select ;;
    "$s_all")
        run_cmd --all ;;
esac
