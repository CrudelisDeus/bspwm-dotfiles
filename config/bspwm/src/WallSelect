#!/bin/sh
# =============================================================
# Author:  gh0stzk
# Repo:    https://github.com/gh0stzk/dotfiles
# Date:    27.06.2025 11:43:32

# WallSelect - Dynamic wallpaper selector with intelligent caching system
# Features:
#   ✔ Auto-updating menu (add/delete wallpapers without restart)
#   ✔ Parallel image processing (optimized CPU usage)
#   ✔ XXHash64 checksum verification for cache integrity
#   ✔ Orphaned cache detection and cleanup
#   ✔ Lockfile system for safe concurrent operations
#   ✔ Rofi integration with theme support
#   ✔ Lightweight (~2ms overhead on cache hits)
#   ✔ Support for video files (mp4, mkv, gif)
#   ✔ Exclude lockscreen directory
#
# Dependencies:
#   → Core: bspwm, xrandr, xdpyinfo, rofi, xxhsum (xxhash)
#   → Media: feh, imagemagick
#   → GNU: findutils, coreutils

# Copyright (C) 2021-2025 gh0stzk <z0mbi3.zk@protonmail.com>
# Licensed under GPL-3.0 license
# =============================================================

# Set some variables
# Ensure HOME is set correctly
[ -z "$HOME" ] && export HOME="$USERPROFILE"

read -r current_rice <"$HOME"/.config/bspwm/.rice
wall_dir="$HOME/.config/bspwm/rices/$current_rice/walls"
cacheDir="$HOME/.cache/$USER/$current_rice"

# Check if wall_dir exists
if [ ! -d "$wall_dir" ]; then
    echo "ERROR: Wall directory does not exist: $wall_dir" >&2
    exit 1
fi

# Create cache dir if not exists
[ -d "$cacheDir" ] || mkdir -p "$cacheDir"

rofi_command="rofi -dmenu -theme $HOME/.config/bspwm/src/rofi-themes/WallSelect.rasi"

# Detect number of cores and set a sensible number of jobs
get_optimal_jobs() {
    cores=$(nproc)
    if [ "$cores" -le 2 ]; then
        echo 2
    elif [ "$cores" -gt 4 ]; then
        echo 4
    else
        echo $((cores - 1))
    fi
}

PARALLEL_JOBS=$(get_optimal_jobs)

process_func_def='process_image() {
    imagen="$1"
    nombre_archivo=$(basename "$imagen")
    cache_file="${cacheDir}/${nombre_archivo}"
    md5_file="${cacheDir}/.${nombre_archivo}.md5"
    lock_file="${cacheDir}/.lock_${nombre_archivo}"
    current_md5=$(xxh64sum "$imagen" | cut -d " " -f1)
    (
        flock -x 9
        if [ ! -f "$cache_file" ] || [ ! -f "$md5_file" ] || [ "$current_md5" != "$(cat "$md5_file" 2>/dev/null)" ]; then
            # Check if it's a video file
            if [[ "$imagen" =~ \.(mp4|mkv|gif)$ ]]; then
                # For video files, create a thumbnail using ffmpeg
                if command -v ffmpeg >/dev/null 2>&1; then
                    ffmpeg -i "$imagen" -vframes 1 -vf "scale=500:500:force_original_aspect_ratio=increase,crop=500:500" "$cache_file" -y >/dev/null 2>&1
                else
                    # Fallback: copy a placeholder or create empty file
                    touch "$cache_file"
                fi
            else
                # For image files, use imagemagick
                magick "$imagen" -resize 500x500^ -gravity center -extent 500x500 "$cache_file"
            fi
            echo "$current_md5" > "$md5_file"
        fi
        rm -f "$lock_file"
    ) 9>"$lock_file"
}'

export process_func_def cacheDir wall_dir

# Clean old locks before starting
rm -f "${cacheDir}"/.lock_* 2>/dev/null || true

# Process files in parallel (images and videos, excluding lockscreen)
find "$wall_dir" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.gif" \) ! -path "*/lockscreen/*" -print0 | \
    xargs -0 -P "$PARALLEL_JOBS" -I {} sh -c "$process_func_def; process_image \"{}\""

# Clean orphaned cache files and their locks
for cached in "$cacheDir"/*; do
    [ -f "$cached" ] || continue
    original="${wall_dir}/$(basename "$cached")"
    if [ ! -f "$original" ]; then
        nombre_archivo=$(basename "$cached")
        rm -f "$cached" \
            "${cacheDir}/.${nombre_archivo}.md5" \
            "${cacheDir}/.lock_${nombre_archivo}"
    fi
done

# Clean any remaining lock files
rm -f "${cacheDir}"/.lock_* 2>/dev/null || true

# Launch rofi (display only filename without extension, excluding lockscreen)
wall_selection=$(find "${wall_dir}" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.gif" \) ! -path "*/lockscreen/*" -print0 |
    xargs -0 basename -a |
    sed 's/\.[^.]*$//' |
    LC_ALL=C sort |
    while IFS= read -r A; do
        printf '%s\000icon\037%s/%s\n' "$A" "$cacheDir" "$A"
    done | $rofi_command)

# Set wallpaper (need to find the actual file with extension)
if [ -n "$wall_selection" ]; then
    # Find the actual file with any supported extension
    actual_file=$(find "${wall_dir}" -type f \( -iname "*.jpg" -o -iname "*.jpeg" -o -iname "*.png" -o -iname "*.webp" -o -iname "*.mp4" -o -iname "*.mkv" -o -iname "*.gif" \) ! -path "*/lockscreen/*" -name "${wall_selection}.*" | head -n1)
    
    if [ -n "$actual_file" ]; then
        # Check if it's a video file
        if [[ "$actual_file" =~ \.(mp4|mkv|gif)$ ]]; then
            # For video files, use AnimatedWall if available
            if command -v AnimatedWall >/dev/null 2>&1; then
                AnimatedWall --start "$actual_file"
            else
                # Fallback: use feh with first frame
                feh --no-fehbg --bg-fill "$actual_file"
            fi
        else
            # For image files, use feh
            feh --no-fehbg --bg-fill "$actual_file"
        fi
    fi
fi
